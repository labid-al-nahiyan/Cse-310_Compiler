Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme x found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme y found
Line# 1: Token <COMMA> Lexeme , found
declaration_list: declaration_list COMMA ID
Line# 1: Token <ID> Lexeme z found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list: declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
x inserted
y inserted
z inserted
unit : var_declaration
program : unit
Line# 1: Token <FLOAT> Lexeme float found
type_specifier : FLOAT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
a inserted
unit : var_declaration
program : program unit
Line# 3: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 3: Token <ID> Lexeme foo found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <SEMICOLON> Lexeme ; found
func_declaration: type_specifier ID LPAREN RPAREN SEMICOLON
unit : func_declaration
program : program unit
Line# 7: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 7: Token <ID> Lexeme foo found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 8: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : variable ASSIGNOP logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statement
Line# 9: Token <ID> Lexeme y found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 9: Token <ID> Lexeme x found
Line# 9: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression: factor
term : unary_expression
simple_expression: term
Line# 9: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression: simple_expression ADDOP term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : variable ASSIGNOP logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 10: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	7--> <foo,VOID,FUNCTION> 
	9--> <x,INT> 
	10--> <y,INT> 
	11--> <z,INT> 
	14--> <a,FLOAT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit
Line# 12: Token <INT> Lexeme int found
type_specifier : INT
Line# 12: Token <ID> Lexeme main found
Line# 12: Token <LPAREN> Lexeme ( found
Line# 12: Token <RPAREN> Lexeme ) found
Line# 12: Token <LCURL> Lexeme { found
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme a found
Line# 13: Token <LSQUARE> Lexeme [ found
Line# 13: Token <CONST_INT> Lexeme 2 found
Line# 13: Token <RSQUARE> Lexeme ] found
declaration_list : ID LTHIRD CONST_INT RTHIRD
Line# 13: Token <COMMA> Lexeme , found
Line# 13: Token <ID> Lexeme c found
Line# 13: Token <COMMA> Lexeme , found
declaration_list: declaration_list COMMA ID
Line# 13: Token <ID> Lexeme i found
Line# 13: Token <COMMA> Lexeme , found
declaration_list: declaration_list COMMA ID
Line# 13: Token <ID> Lexeme j found
Line# 13: Token <SEMICOLON> Lexeme ; found
declaration_list: declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
a inserted
c inserted
i inserted
j inserted
statement : var_declaration
statements : statement
Line# 13: Token <FLOAT> Lexeme float found
type_specifier : FLOAT
Line# 13: Token <ID> Lexeme d found
Line# 13: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
d inserted
statement : var_declaration
statements : statements statement
Line# 14: Token <INT> Lexeme int found
type_specifier : INT
Line# 14: Token <ID> Lexeme k found
Line# 14: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
k inserted
statement : var_declaration
statements : statements statement
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <LSQUARE> Lexeme [ found
Line# 15: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 15: Token <RSQUARE> Lexeme ] found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : logic_expression 
variable : ID LTHIRD expression RTHIRD
Line# 15: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression: factor
term : unary_expression
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <LSQUARE> Lexeme [ found
Line# 16: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 16: Token <RSQUARE> Lexeme ] found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : logic_expression 
variable : ID LTHIRD expression RTHIRD
Line# 16: Token <ASSIGNOP> Lexeme = found
Line# 16: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 16: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : variable ASSIGNOP logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 17: Token <ID> Lexeme i found
Line# 17: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <LSQUARE> Lexeme [ found
Line# 17: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 17: Token <RSQUARE> Lexeme ] found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : logic_expression 
variable : ID LTHIRD expression RTHIRD
Line# 17: Token <ADDOP> Lexeme + found
factor : variable 
unary_expression: factor
term : unary_expression
simple_expression: term
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <LSQUARE> Lexeme [ found
Line# 17: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 17: Token <RSQUARE> Lexeme ] found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : logic_expression 
variable : ID LTHIRD expression RTHIRD
Line# 17: Token <SEMICOLON> Lexeme ; found
factor : variable 
unary_expression: factor
term : unary_expression
simple_expression: simple_expression ADDOP term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : variable ASSIGNOP logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 18: Token <ID> Lexeme j found
Line# 18: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 18: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 18: Token <MULOP> Lexeme * found
Line# 18: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression: factor
term : term MULOP unary_expression
Line# 18: Token <ADDOP> Lexeme + found
simple_expression: term
Line# 18: Token <LPAREN> Lexeme ( found
Line# 18: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 18: Token <MULOP> Lexeme % found
Line# 18: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression: factor
term : term MULOP unary_expression
Line# 18: Token <RELOP> Lexeme < found
simple_expression: term
Line# 18: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 18: Token <LOGICOP> Lexeme && found
simple_expression: term
rel_expression  : simple_expression RELOP simple_expression
Line# 18: Token <CONST_INT> Lexeme 8 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 18: Token <RPAREN> Lexeme ) found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression LOGICOP rel_expression
expression      : logic_expression 
factor : LPAREN expression RPAREN 
unary_expression: factor
term : unary_expression
Line# 18: Token <LOGICOP> Lexeme || found
simple_expression: simple_expression ADDOP term
rel_expression  : simple_expression
Line# 18: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 18: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression LOGICOP rel_expression
expression      : variable ASSIGNOP logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 19: Token <ID> Lexeme d found
Line# 19: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 19: Token <ID> Lexeme var found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 19: Token <COMMA> Lexeme , found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
arguments  : logic_expression
Line# 19: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 19: Token <MULOP> Lexeme * found
Line# 19: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression: factor
term : term MULOP unary_expression
Line# 19: Token <RPAREN> Lexeme ) found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN 
func_call : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unary_expression: factor
term : unary_expression
Line# 19: Token <ADDOP> Lexeme + found
simple_expression: term
Line# 19: Token <CONST_FLOAT> Lexeme 3.5 found
factor : CONST_FLOAT 
unary_expression: factor
term : unary_expression
Line# 19: Token <MULOP> Lexeme * found
Line# 19: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression: factor
term : term MULOP unary_expression
Line# 19: Token <SEMICOLON> Lexeme ; found
simple_expression: simple_expression ADDOP term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : variable ASSIGNOP logic_expression 
expression_statement: expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 20: Token <RETURN> Lexeme return found
Line# 20: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression: factor
term : unary_expression
Line# 20: Token <SEMICOLON> Lexeme ; found
simple_expression: term
rel_expression  : simple_expression
logic_expression: rel_expression
expression      : logic_expression 
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 21: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	14--> <a,INT,Array> 
	16--> <c,INT> 
	17--> <d,FLOAT> 
	22--> <i,INT> 
	23--> <j,INT> 
	24--> <k,INT> 
	ScopeTable# 1
	6--> <main,INT,FUNCTION> 
	7--> <foo,VOID,FUNCTION> 
	9--> <x,INT> 
	10--> <y,INT> 
	11--> <z,INT> 
	14--> <a,FLOAT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit
start : program
Total lines: 22
Total errors: 0
