Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme x found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme y found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme z found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 1: Token <FLOAT> Lexeme float found
type_specifier    : FLOAT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : program unit
Line# 3: Token <VOID> Lexeme void found
type_specifier     : VOID
Line# 3: Token <ID> Lexeme foo found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <SEMICOLON> Lexeme ; found
func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON
unit : func_declaration
program : program unit
Line# 5: Token <INT> Lexeme int found
type_specifier : INT
Line# 5: Token <ID> Lexeme var found
Line# 5: Token <LPAREN> Lexeme ( found
Line# 5: Token <INT> Lexeme int found
type_specifier : INT
Line# 5: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 5: Token <COMMA> Lexeme , found
Line# 5: Token <INT> Lexeme int found
type_specifier : INT
Line# 5: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 5: Token <RPAREN> Lexeme ) found
Line# 5: Token <LCURL> Lexeme { found
Line# 6: Token <RETURN> Lexeme return found
Line# 6: Token <ID> Lexeme a found
Line# 6: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 6: Token <ID> Lexeme b found
Line# 6: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 7: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	2--> <a, INT,> 
	3--> <b, INT,> 
	ScopeTable# 1
	1--> <x, INT> 
	2--> <y, INT> <a, FLOAT> 
	3--> <z, INT> 
	7--> <foo, FUNCTION,VOID> 
	12--> <var, FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 9: Token <VOID> Lexeme void found
type_specifier     : VOID
Line# 9: Token <ID> Lexeme foo found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <LCURL> Lexeme { found
Line# 10: Token <ID> Lexeme x found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 10: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statement
Line# 11: Token <ID> Lexeme y found
Line# 11: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 11: Token <ID> Lexeme x found
Line# 11: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 11: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 11: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	ScopeTable# 1
	1--> <x, INT> 
	2--> <y, INT> <a, FLOAT> 
	3--> <z, INT> 
	7--> <foo, FUNCTION,VOID> 
	12--> <var, FUNCTION,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme foo found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <RPAREN> Lexeme ) found
Line# 13: Token <LCURL> Lexeme { found
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL RCURL
	ScopeTable# 4
	ScopeTable# 1
	1--> <x, INT> 
	2--> <y, INT> <a, FLOAT> 
	3--> <z, INT> 
	7--> <foo, FUNCTION,VOID> 
	12--> <var, FUNCTION,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
Line# 16: Token <INT> Lexeme int found
type_specifier : INT
Line# 16: Token <ID> Lexeme z found
Line# 16: Token <LPAREN> Lexeme ( found
Line# 16: Token <INT> Lexeme int found
type_specifier : INT
Line# 16: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 16: Token <RPAREN> Lexeme ) found
Line# 16: Token <LCURL> Lexeme { found
Line# 17: Token <RETURN> Lexeme return found
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statement
Line# 18: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 5
	2--> <a, INT,> 
	ScopeTable# 1
	1--> <x, INT> 
	2--> <y, INT> <a, FLOAT> 
	3--> <z, INT> 
	7--> <foo, FUNCTION,VOID> 
	12--> <var, FUNCTION,INT> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 20: Token <INT> Lexeme int found
type_specifier : INT
Line# 20: Token <ID> Lexeme main found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <RPAREN> Lexeme ) found
Line# 20: Token <LCURL> Lexeme { found
Line# 21: Token <INT> Lexeme int found
type_specifier : INT
Line# 21: Token <ID> Lexeme a found
Line# 21: Token <LSQUARE> Lexeme [ found
Line# 21: Token <CONST_INT> Lexeme 2 found
Line# 21: Token <RSQUARE> Lexeme ] found
declaration_list : ID LTHIRD CONST_INT RTHIRD
Line# 21: Token <COMMA> Lexeme , found
Line# 21: Token <ID> Lexeme c found
Line# 21: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 21: Token <ID> Lexeme i found
Line# 21: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 21: Token <ID> Lexeme j found
Line# 21: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 21: Token <FLOAT> Lexeme float found
type_specifier    : FLOAT
Line# 21: Token <ID> Lexeme d found
Line# 21: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 22: Token <FLOAT> Lexeme float found
type_specifier    : FLOAT
Line# 22: Token <ID> Lexeme i found
Line# 22: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 23: Token <INT> Lexeme int found
type_specifier : INT
Line# 23: Token <ID> Lexeme k found
Line# 23: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 24: Token <VOID> Lexeme void found
type_specifier     : VOID
Line# 24: Token <ID> Lexeme e found
Line# 24: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statements statement
Line# 25: Token <ID> Lexeme a found
Line# 25: Token <LSQUARE> Lexeme [ found
Line# 25: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 25: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 25: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 25: Token <ID> Lexeme c found
Line# 25: Token <LSQUARE> Lexeme [ found
Line# 25: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 25: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 25: Token <ASSIGNOP> Lexeme = found
Line# 25: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 26: Token <ID> Lexeme a found
Line# 26: Token <LSQUARE> Lexeme [ found
Line# 26: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 26: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 26: Token <ASSIGNOP> Lexeme = found
Line# 26: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 26: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 27: Token <ID> Lexeme i found
Line# 27: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 27: Token <ID> Lexeme a found
Line# 27: Token <LSQUARE> Lexeme [ found
Line# 27: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 27: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 27: Token <ADDOP> Lexeme + found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 27: Token <ID> Lexeme a found
Line# 27: Token <LSQUARE> Lexeme [ found
Line# 27: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 27: Token <RSQUARE> Lexeme ] found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LSQUARE expression RSQUARE
Line# 27: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 28: Token <ID> Lexeme j found
Line# 28: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 28: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 28: Token <MULOP> Lexeme * found
Line# 28: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor
term : term MULOP unary_expression
Line# 28: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 28: Token <LPAREN> Lexeme ( found
Line# 28: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 28: Token <MULOP> Lexeme % found
Line# 28: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor
term : term MULOP unary_expression
Line# 28: Token <RELOP> Lexeme < found
simple_expression : term
Line# 28: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 28: Token <LOGICOP> Lexeme && found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
Line# 28: Token <CONST_INT> Lexeme 8 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 28: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : logic_expression
factor : LPAREN expression RPAREN
unary_expression : factor
term : unary_expression
Line# 28: Token <LOGICOP> Lexeme || found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
Line# 28: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression LOGICOP rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 29: Token <ID> Lexeme d found
Line# 29: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 29: Token <ID> Lexeme var found
Line# 29: Token <LPAREN> Lexeme ( found
Line# 29: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 29: Token <COMMA> Lexeme , found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 29: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 29: Token <MULOP> Lexeme * found
Line# 29: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT 
unary_expression : factor
term : term MULOP unary_expression
Line# 29: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor
term : unary_expression
Line# 29: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 29: Token <CONST_FLOAT> Lexeme 3.5 found
factor : CONST_FLOAT 
unary_expression : factor
term : unary_expression
Line# 29: Token <MULOP> Lexeme * found
Line# 29: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT 
unary_expression : factor
term : term MULOP unary_expression
Line# 29: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 30: Token <RETURN> Lexeme return found
Line# 30: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 30: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 31: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 6
	2--> <a, ARRAY,INT> 
	4--> <c, INT> 
	5--> <d, FLOAT> 
	6--> <e, VOID> 
	10--> <i, INT> 
	11--> <j, INT> 
	12--> <k, INT> 
	ScopeTable# 1
	1--> <x, INT> 
	2--> <y, INT> <a, FLOAT> <main, FUNCTION,INT> 
	3--> <z, INT> 
	7--> <foo, FUNCTION,VOID> 
	12--> <var, FUNCTION,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total lines: 31
Total errors: 0
