Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme i found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 1: Token <ID> Lexeme j found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 2: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 4: Token <ID> Lexeme ll found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme m found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme n found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme o found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 4: Token <ID> Lexeme p found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 6: Token <ID> Lexeme k found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 6: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 7: Token <WHILE> Lexeme while found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <ID> Lexeme k found
Line# 7: Token <RELOP> Lexeme < found
variable : ID 
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 7: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 7: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <PRINTLN> Lexeme println found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <ID> Lexeme k found
Line# 8: Token <RPAREN> Lexeme ) found
Line# 8: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 9: Token <FOR> Lexeme for found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme m found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 9: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
Line# 9: Token <ID> Lexeme m found
Line# 9: Token <RELOP> Lexeme < found
variable : ID 
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 9: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT 
unary_expression : factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
Line# 9: Token <ID> Lexeme m found
Line# 9: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP
unary_expression : factor
term : unary_expression
Line# 9: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 9: Token <LCURL> Lexeme { found
Line# 10: Token <PRINTLN> Lexeme println found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme m found
Line# 10: Token <RPAREN> Lexeme ) found
Line# 10: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	ScopeTable# 3
	ScopeTable# 2
	1--> <n, INT> 
	2--> <o, INT> 
	3--> <p, INT> 
	9--> <k, INT> <ll, INT> 
	11--> <m, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION,INT >
	7--> <i, INT> 
	8--> <j, INT> 
statement : compound_statement
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 
statements : statements statement
Line# 12: Token <ID> Lexeme k found
Line# 12: Token <INCOP> Lexeme ++ found
variable : ID 
factor : variable INCOP
unary_expression : factor
term : unary_expression
Line# 12: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression_statement
statements : statements statement
Line# 14: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	ScopeTable# 2
	1--> <n, INT> 
	2--> <o, INT> 
	3--> <p, INT> 
	9--> <k, INT> <ll, INT> 
	11--> <m, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION,INT >
	7--> <i, INT> 
	8--> <j, INT> 
statement : compound_statement
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	1--> <n, INT> 
	2--> <o, INT> 
	3--> <p, INT> 
	9--> <k, INT> <ll, INT> 
	11--> <m, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION,INT >
	7--> <i, INT> 
	8--> <j, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines: 16
Total Errors: 0
