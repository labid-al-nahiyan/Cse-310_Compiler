start : program	 <Line: 1-15>
 program : program unit	 <Line: 1-15>
  program : unit	 <Line: 1-1>
   unit : var_declaration	 <Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON	 <Line: 1-1>
     type_specifier : INT	 <Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID	 <Line: 1-1>
      declaration_list : ID	 <Line: 1-1>
       ID : i	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : j	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition	 <Line: 2-15>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement	 <Line: 2-15>
    type_specifier : INT	 <Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL	 <Line: 2-15>
     LCURL : {	<Line: 2>
     statements : statements statement	 <Line: 4-14>
      statements : statements statement	 <Line: 4-6>
       statements : statement	 <Line: 4-4>
        statement : var_declaration	 <Line: 4-4>
         var_declaration : type_specifier declaration_list SEMICOLON	 <Line: 4-4>
          type_specifier : INT	 <Line: 4-4>
           INT : int	<Line: 4>
          declaration_list : declaration_list COMMA ID	 <Line: 4-4>
           declaration_list : declaration_list COMMA ID	 <Line: 4-4>
            declaration_list : declaration_list COMMA ID	 <Line: 4-4>
             declaration_list : declaration_list COMMA ID	 <Line: 4-4>
              declaration_list : declaration_list COMMA ID	 <Line: 4-4>
               declaration_list : ID	 <Line: 4-4>
                ID : k	<Line: 4>
               COMMA : ,	<Line: 4>
               ID : ll	<Line: 4>
              COMMA : ,	<Line: 4>
              ID : m	<Line: 4>
             COMMA : ,	<Line: 4>
             ID : n	<Line: 4>
            COMMA : ,	<Line: 4>
            ID : o	<Line: 4>
           COMMA : ,	<Line: 4>
           ID : p	<Line: 4>
          SEMICOLON : ;	<Line: 4>
       statement : expression_statement	 <Line: 6-6>
        expression_statement : expression SEMICOLON	 <Line: 6-6>
         expression : variable ASSIGNOP logic_expression	 <Line: 6-6>
          variable : ID	 <Line: 6-6>
           ID : k	<Line: 6>
          ASSIGNOP : =	<Line: 6>
          logic_expression : rel_expression	 <Line: 6-6>
           rel_expression : simple_expression	 <Line: 6-6>
            simple_expression : term	 <Line: 6-6>
             term : unary_expression	 <Line: 6-6>
              unary_expression : factor	 <Line: 6-6>
               factor : CONST_INT	 <Line: 6-6>
                CONST_INT : 0	<Line: 6>
         SEMICOLON : ;	<Line: 6>
      statement : WHILE LPAREN expression RPAREN statement	 <Line: 7-14>
       WHILE : while	<Line: 7>
       LPAREN : (	<Line: 7>
       expression : logic_expression	 <Line: 7-7>
        logic_expression : rel_expression	 <Line: 7-7>
         rel_expression : simple_expression RELOP simple_expression	 <Line: 7-7>
          simple_expression : term	 <Line: 7-7>
           term : unary_expression	 <Line: 7-7>
            unary_expression : factor	 <Line: 7-7>
             factor : variable	 <Line: 7-7>
              variable : ID	 <Line: 7-7>
               ID : k	<Line: 7>
          RELOP : <	<Line: 7>
          simple_expression : term	 <Line: 7-7>
           term : unary_expression	 <Line: 7-7>
            unary_expression : factor	 <Line: 7-7>
             factor : CONST_INT	 <Line: 7-7>
              CONST_INT : 10	<Line: 7>
       RPAREN : )	<Line: 7>
       statement : compound_statement	 <Line: 7-14>
        compound_statement : LCURL statements RCURL	 <Line: 7-14>
         LCURL : {	<Line: 7>
         statements : statements statement	 <Line: 8-12>
          statements : statements statement	 <Line: 8-11>
           statements : statement	 <Line: 8-8>
            statement : PRINTLN LPAREN ID RPAREN SEMICOLON	 <Line: 8-8>
             PRINTLN : println	<Line: 8>
             LPAREN : (	<Line: 8>
             ID : k	<Line: 8>
             RPAREN : )	<Line: 8>
             SEMICOLON : ;	<Line: 8>
           statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement	 <Line: 9-11>
            FOR : for	<Line: 9>
            LPAREN : (	<Line: 9>
            expression_statement : expression SEMICOLON	 <Line: 9-9>
             expression : variable ASSIGNOP logic_expression	 <Line: 9-9>
              variable : ID	 <Line: 9-9>
               ID : m	<Line: 9>
              ASSIGNOP : =	<Line: 9>
              logic_expression : rel_expression	 <Line: 9-9>
               rel_expression : simple_expression	 <Line: 9-9>
                simple_expression : term	 <Line: 9-9>
                 term : unary_expression	 <Line: 9-9>
                  unary_expression : factor	 <Line: 9-9>
                   factor : CONST_INT	 <Line: 9-9>
                    CONST_INT : 0	<Line: 9>
             SEMICOLON : ;	<Line: 9>
            expression_statement : expression SEMICOLON	 <Line: 9-9>
             expression : logic_expression	 <Line: 9-9>
              logic_expression : rel_expression	 <Line: 9-9>
               rel_expression : simple_expression RELOP simple_expression	 <Line: 9-9>
                simple_expression : term	 <Line: 9-9>
                 term : unary_expression	 <Line: 9-9>
                  unary_expression : factor	 <Line: 9-9>
                   factor : variable	 <Line: 9-9>
                    variable : ID	 <Line: 9-9>
                     ID : m	<Line: 9>
                RELOP : <	<Line: 9>
                simple_expression : term	 <Line: 9-9>
                 term : unary_expression	 <Line: 9-9>
                  unary_expression : factor	 <Line: 9-9>
                   factor : CONST_INT	 <Line: 9-9>
                    CONST_INT : 5	<Line: 9>
             SEMICOLON : ;	<Line: 9>
            expression : logic_expression	 <Line: 9-9>
             logic_expression : rel_expression	 <Line: 9-9>
              rel_expression : simple_expression	 <Line: 9-9>
               simple_expression : term	 <Line: 9-9>
                term : unary_expression	 <Line: 9-9>
                 unary_expression : factor	 <Line: 9-9>
                  factor : variable INCOP	 <Line: 9-9>
                   variable : ID	 <Line: 9-9>
                    ID : m	<Line: 9>
                   INCOP : ++	<Line: 9>
            RPAREN : )	<Line: 9>
            statement : compound_statement	 <Line: 9-11>
             compound_statement : LCURL statements RCURL	 <Line: 9-11>
              LCURL : {	<Line: 9>
              statements : statement	 <Line: 10-10>
               statement : PRINTLN LPAREN ID RPAREN SEMICOLON	 <Line: 10-10>
                PRINTLN : println	<Line: 10>
                LPAREN : (	<Line: 10>
                ID : m	<Line: 10>
                RPAREN : )	<Line: 10>
                SEMICOLON : ;	<Line: 10>
              RCURL : }	<Line: 11>
          statement : expression_statement	 <Line: 12-12>
           expression_statement : expression SEMICOLON	 <Line: 12-12>
            expression : logic_expression	 <Line: 12-12>
             logic_expression : rel_expression	 <Line: 12-12>
              rel_expression : simple_expression	 <Line: 12-12>
               simple_expression : term	 <Line: 12-12>
                term : unary_expression	 <Line: 12-12>
                 unary_expression : factor	 <Line: 12-12>
                  factor : variable INCOP	 <Line: 12-12>
                   variable : ID	 <Line: 12-12>
                    ID : k	<Line: 12>
                   INCOP : ++	<Line: 12>
            SEMICOLON : ;	<Line: 12>
         RCURL : }	<Line: 14>
     RCURL : }	<Line: 15>
